---
import EmbedLayout from "../layouts/EmbedLayout.astro";
---

<EmbedLayout
  title="Stoako | Elgeis Family Tree"
  embedTitle="Stoako | Elgeis Family Tree"
  embedDescription="View the Elgeis family tree brought to you by the Kingdom of Stoako."
>
  <h2>Click, drag, and zoom</h2>
  <small>Last updated: 2/17/2025</small>
  <br />
  <a href="https://stoako.com/images/elgeis_family_tree.png" target="_blank">View Full Image</a>
  <canvas id="canvas"></canvas>
</EmbedLayout>

<style>
  canvas {
    display: block;
    background-color: #eee;
    cursor: grab;
    width: 100%;
  }

  h2 {
    margin: 0;
    padding: 0;
  }
</style>

<script is:inline>
  const canvas = document.getElementById("canvas");
  const ctx = canvas.getContext("2d");

  canvas.style.backgroundColor = "black";

  const image = new Image();
  image.src = "https://stoako.com/images/elgeis_family_tree.png"; // Replace with your image URL

  let scale = 1; // Initial zoom scale
  let offsetX = 0,
    offsetY = 0; // Initial offset for panning
  let isDragging = false;
  let lastX = 0,
    lastY = 0;

  let lastTouchDist = 0; // Track distance between touches for zooming

  // Wait for the image to load before drawing it
  image.onload = () => {
    // Set canvas size to match the image dimensions
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    // Draw the initial image on the canvas
    drawImage();
  };

  // Draw the image with current scale and offsets
  function drawImage() {
    ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas
    ctx.drawImage(
      image,
      offsetX,
      offsetY,
      image.width * scale,
      image.height * scale
    );
  }

  // Handle mouse events for dragging
  canvas.addEventListener("mousedown", (e) => {
    isDragging = true;
    lastX = e.offsetX;
    lastY = e.offsetY;
    canvas.style.cursor = "grabbing";
  });

  canvas.addEventListener("mousemove", (e) => {
    if (isDragging) {
      const dx = e.offsetX - lastX;
      const dy = e.offsetY - lastY;
      offsetX += dx;
      offsetY += dy;
      lastX = e.offsetX;
      lastY = e.offsetY;
      drawImage();
    }
  });

  canvas.addEventListener("mouseup", () => {
    isDragging = false;
    canvas.style.cursor = "grab";
  });

  canvas.addEventListener("mouseout", () => {
    isDragging = false;
    canvas.style.cursor = "grab";
  });

  // Mobile support for dragging
  canvas.addEventListener("touchstart", (e) => {
    if (e.touches.length === 1) {
      isDragging = true;
      lastX = e.touches[0].clientX;
      lastY = e.touches[0].clientY;
      canvas.style.cursor = "grabbing";
    }
  });

  canvas.addEventListener("touchmove", (e) => {
    if (isDragging && e.touches.length === 1) {
      const dx = e.touches[0].clientX - lastX;
      const dy = e.touches[0].clientY - lastY;
      offsetX += dx;
      offsetY += dy;
      lastX = e.touches[0].clientX;
      lastY = e.touches[0].clientY;
      drawImage();
    } else if (e.touches.length === 2) {
      // Pinch-to-zoom handling for mobile
      const touchDist = Math.hypot(
        e.touches[0].clientX - e.touches[1].clientX,
        e.touches[0].clientY - e.touches[1].clientY
      );

      if (lastTouchDist === 0) {
        lastTouchDist = touchDist;
        return;
      }

      const zoomFactor = touchDist / lastTouchDist;
      let newScale = scale * zoomFactor;

      // Apply zoom limits
      newScale = Math.min(Math.max(newScale, minZoom), maxZoom);

      if (newScale !== scale) {
        scale = newScale;
        lastTouchDist = touchDist;

        // Adjust offset to zoom around the center of the pinch
        const centerX = (e.touches[0].clientX + e.touches[1].clientX) / 2;
        const centerY = (e.touches[0].clientY + e.touches[1].clientY) / 2;

        offsetX = centerX - (centerX - offsetX) * zoomFactor;
        offsetY = centerY - (centerY - offsetY) * zoomFactor;

        drawImage();
      }
    }
  });

  canvas.addEventListener("touchend", () => {
    if (isDragging) {
      isDragging = false;
      canvas.style.cursor = "grab";
    }
    if (e.touches.length < 2) {
      lastTouchDist = 0; // Reset pinch distance when touch ends
    }
  });

  // Zoom with mouse wheel
  const minZoom = 0.1; // Minimum zoom-in level
  const maxZoom = 5; // Maximum zoom-out level

  canvas.addEventListener("wheel", (e) => {
    e.preventDefault();

    const zoomFactor = 1.1;
    const mouseX = e.offsetX;
    const mouseY = e.offsetY;

    // Determine new scale based on zoom direction
    let newScale = scale;
    if (e.deltaY < 0) {
      // Zoom in (increase scale)
      newScale *= zoomFactor;
    } else {
      // Zoom out (decrease scale)
      newScale /= zoomFactor;
    }

    // Apply zoom limits
    newScale = Math.min(Math.max(newScale, minZoom), maxZoom);

    // If the scale hasn't changed, don't update offsets
    if (newScale === scale) return;

    // Calculate how much the zoom changes in scale
    const scaleChange = newScale / scale;

    // Adjust offsets so zoom happens around the mouse position
    offsetX = mouseX - (mouseX - offsetX) * scaleChange;
    offsetY = mouseY - (mouseY - offsetY) * scaleChange;

    // Update the scale
    scale = newScale;

    // Redraw the image with the new scale and offset
    drawImage();
  });
</script>
